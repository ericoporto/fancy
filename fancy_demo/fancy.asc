// fancy module script

// Define maximum text tokens and stack size
#define MAX_TXTTK 1024
#define MAX_TXTST 6
#define MAX_LINES 16

#region TEXT_TOKEN_REG
enum TkType
{
  eTkText = 0,
  eTkLinebreak,
  eTkBlank, 
  eTkGraphic
};

managed struct TextToken
{
  int text_begin;
  int text_length;
  int color;
  FontType font; // encodes graphic in graphic tokens
  TkType type;
  int width;
  int height;
  // requires a second pass to fill
  int line_height;
};

TextToken* _newLineBreakTxtToken()
{
  TextToken* tk = new TextToken;
  tk.type = eTkLinebreak;
  return tk;
}

TextToken* _newSpriteTxtToken(int sprite)
{
  TextToken* tk = new TextToken;
  tk.type = eTkGraphic;
  tk.font = sprite;
  tk.width = Game.SpriteWidth[sprite];
  tk.height = Game.SpriteHeight[sprite];
  return tk;
}

TextToken* _newTxtToken(String text, int text_begin, int text_length, int color, FontType font)
{
  TextToken* tk = new TextToken;
  tk.text_begin = text_begin;
  tk.text_length = text_length;
  tk.color = color;
  tk.font = font;
  tk.width = GetTextWidth(text, font);
  tk.height = GetFontHeight(font);
  return tk;
}

int _AppendTxtTok(TextToken* txttk_arr[], int txttk_count, TextToken* tk)
{
  int i = txttk_count;
  
  txttk_arr[i] = tk;
  txttk_count++;
  return txttk_count;
}

int _InserTxtTok(TextToken* txttk_arr[], int txttk_count, TextToken* tk, int index)
{
  txttk_count++;
  for(int i=txttk_count; i>index; i--)
  {
    txttk_arr[i] = txttk_arr[i-1];
  }
  
  txttk_arr[index] = tk;
  
  return txttk_count;  
}

TextToken* [] _NewTxtTok()
{
   TextToken* txttk_arr[];
   txttk_arr = new TextToken [MAX_TXTTK];
  return txttk_arr;
}
#endregion // TEXT_TOKEN_REG

enum TagType
{
  eTagNone = 0,
  eTagColor,
  eTagFont, 
  eTagSprite
};

#region STACK_OF_INT_REG
struct StackOfInt
{
  int items[MAX_TXTST];
  int index;
  import void Push(int number);
  import int Pop();
  import void Clear();
};

void StackOfInt::Push(int number)
{
  this.items[this.index] = number;
  this.index++;
}

int StackOfInt::Pop()
{
  this.index--;
  return this.items[this.index];
}

void StackOfInt::Clear()
{
  this.index = 0;
}
#endregion // STACK_OF_INT_REG

// Get the type of tag in format [>tag_type<:data]
TagType _get_tag_type(String tag)
{
  int c = tag.Chars[0];
  switch (c) {
    case 'c': return eTagColor;
    case 'f': return eTagFont;
    case 's': return eTagSprite;
  }
  return eTagNone;
}

// Get the data from tag in format [tag_type:>data<]
int _get_tag_data(String tag, TagType tag_type)
{
  if (tag_type == eTagNone) return 0;
  int p = tag.IndexOf(":");
  if (p <= 0) return -1;
  p++;

  String data = tag.Substring(p, tag.Length - p);

  if (data.Chars[0] >= '0' && data.Chars[0] <= '9') return data.AsInt;
  return 0;
}

// Parse the input text for tags and generate text tokens
int _parse_text(TextToken* txttk_arr[], String text, FontType base_font, int base_color)
{
  int len = text.Length;
  int color = base_color;
  FontType font = base_font;
  String token = "";
  int token_start = 0;
  int token_length = 0;
  int txttk_count = 0;
  
  StackOfInt stk_font;
  StackOfInt stk_color;

  for (int i = 0; i < len; i++) {
    int c = text.Chars[i];

    if (c == '[') {
      if (token.Length > 0) {
        txttk_count = _AppendTxtTok(txttk_arr, txttk_count, _newTxtToken(token, token_start, token_length, color, font));
        token = "";
        token_start = i - token_length;
        token_length = 0;
      }

      i++;
      bool is_closing = false;
      if (i < len && text.Chars[i] == '/') {
        is_closing = true;
        i++;
      }

      int j = i;
      while (j <= len && text.Chars[j] != ']') j++;
      int delta = j - i;

      String strtag = text.Substring(i, delta);
      TagType tag = _get_tag_type(strtag);
      TagType tdata = tag;
      if (is_closing) tdata = eTagNone;
      int data = _get_tag_data(strtag, tdata);
      switch (tag) {
        case eTagColor:
          if (is_closing) color = stk_color.Pop();
          else {
            stk_color.Push(color);
            color = data;
          }
          break;
        case eTagFont:
          if (is_closing) font = stk_font.Pop();
          else {
            stk_font.Push(font);
            font = data;
          }
          break;
        case eTagSprite: // sprite token has no closing element
          txttk_count = _AppendTxtTok(txttk_arr, txttk_count, _newSpriteTxtToken(data));
          break;
      }

      i += delta + is_closing - 1;
      if (is_closing) {
        token_start = i;
      }
    } else if (c == ']') {
      // skip
    } else if (c == ' ' || c == '\n') {
      if (token.Length > 0) {
        txttk_count = _AppendTxtTok(txttk_arr, txttk_count, _newTxtToken(token, token_start, token_length, color, font));
        token = "";
        token_start = i - token_length;
        token_length = 0;
      }
      txttk_count = _AppendTxtTok(txttk_arr, txttk_count, _newTxtToken(" ", i, 1, color, font));
    } else {
      if (token.Length == 0) {
        token_start = i;
      }
      token = token.AppendChar(c);
      token_length++;
    }
  }
  if (token_length > 0) {
    txttk_count = _AppendTxtTok(txttk_arr, txttk_count, _newTxtToken(token, token_start, token_length, color, font));
  }
  
  _AppendTxtTok(txttk_arr, txttk_count, null);
  return txttk_count;
}

int _do_word_wrapping(TextToken* tk_arr[], int tk_count, String text, int width)
{
  int w = 0;
  int line = 0;
  int line_height[MAX_LINES];

  for (int i=0; i < tk_count; i++) {
    TextToken* t = tk_arr[i];
    String word = "";
    if(t.type == eTkText) word = text.Substring(t.text_begin, t.text_length);
    
    bool is_wrap_linebreak = w + t.width > width;
    bool is_char_linebreak = word == "\n";
    if (word == " ")
      t.type = eTkBlank; // tiny optimization for next draw

    if (is_wrap_linebreak || is_char_linebreak) {
      line++;
      w = 0;
      if (is_char_linebreak) t.width = 0;
    }
    if (is_char_linebreak) {
      t.type = eTkLinebreak;
    } else if (is_wrap_linebreak) {
      tk_count = _InserTxtTok(tk_arr, tk_count, _newLineBreakTxtToken(), i);
    }
    if (t.height > line_height[line]) line_height[line] = t.height;
    w += t.width;
  }
    
  line = 0;
  for (int i = 0; i < tk_count; i++) {
    TextToken* t = tk_arr[i];
    t.line_height = line_height[line];    
    if (t.type == eTkLinebreak) line++;
  }
  return tk_count;
}

void _draw_text(DrawingSurface* surf, int x, int y, int color, FontType font, const string text)
{
  surf.DrawingColor = color;
  surf.DrawString(x, y, font, text);
}

void _draw_sprite(DrawingSurface* surf, int x, int y, int graphic)
{
  surf.DrawImage(x, y, graphic);
}

// Write text tokens on a surface
void _draw_tokens(TextToken* tk_arr[], int tk_count, DrawingSurface* surf, String text, int x, int y, int width)
{
  int r_x = x;
  int r_y = y;
  String word;
  
  for (int i = 0; i < tk_count; i++) {
    TextToken* t = tk_arr[i];
    int line_height = t.line_height;
    int draw_y = r_y + line_height - t.height;
    
    switch (t.type) {
      case eTkLinebreak:
        r_x = x;
        r_y += line_height;
        continue; // this will skip to next line and token
      case eTkText:
        word = text.Substring(t.text_begin, t.text_length);
        _draw_text(surf, r_x, draw_y, t.color, t.font, word);
        break;
      case eTkGraphic:
        _draw_sprite(surf, r_x, draw_y, t.font);
        break;
    }
    r_x += t.width;
  }
}

// ----------------------------------------------------------------------
// ---------------- fancy module public interface -----------------------
// ----------------------------------------------------------------------

// draw fancy text wrapped on a surface
void DrawFancyTextWrapped(this DrawingSurface*, int x, int y, int width, int color, FontType font, const string text)
{
  TextToken* txttk_arr[] = _NewTxtTok();
  int tk_count = _parse_text(txttk_arr, text, font, color);
  tk_count = _do_word_wrapping(txttk_arr, tk_count, text, width);
  _draw_tokens(txttk_arr, tk_count, this, text, x, y, width);
}
