// fancy module script

// Define maximum text tokens and stack size
#define MAX_TXTTK 1024
#define MAX_TXTST 8

#region TEXT_TOKEN_REG
struct TextToken {
  int text_begin;
  int text_length;
  int color;
  FontType font;
  int width;
  int height;
};

TextToken _txttk[MAX_TXTTK];
int _txttk_count; // Counts text tokens

void _AppendTxtTok(String text, int text_begin, int text_length, int color, FontType font) {
  int i = _txttk_count;
  _txttk[i].text_begin = text_begin;
  _txttk[i].text_length = text_length;
  _txttk[i].color = color;
  _txttk[i].font = font;
  //_txttk[i].text = text;
  _txttk[i].width = GetTextWidth(text, font);
  _txttk[i].height = GetFontHeight(font);
  _txttk_count++;
}

void _ClearTxtTok() {
  _txttk_count = 0;
}
#endregion // TEXT_TOKEN_REG

enum TagType {
  eTagNone = 0,
  eTagColor,
  eTagFont
};

#region STACK_OF_INT_REG
struct StackOfInt {
  int items[MAX_TXTST];
  int index;
  import void Push(int number);
  import int Pop();
  import void Clear();
};

void StackOfInt::Push(int number) {
  this.items[this.index] = number;
  this.index++;
}

int StackOfInt::Pop() {
  this.index--;
  return this.items[this.index];
}

void StackOfInt::Clear() {
  this.index = 0;
}
#endregion // STACK_OF_INT_REG

// Stacks for text state
StackOfInt _stk_font;
StackOfInt _stk_color;

// Get the type of tag in format [>tag_type<:data]
TagType _get_tag_type(String tag) {
  int c = tag.Chars[0];
  switch (c) {
    case 'c': // color
      return eTagColor;
    case 'f': // font
      return eTagFont;
  }
  return eTagNone;
}

// Get the data from tag in format [tag_type:>data<]
int _get_tag_data(String tag, TagType tag_type) {
  if (tag_type == eTagNone) return 0;
  int p = tag.IndexOf(":");
  if (p <= 0) return -1;
  p++;

  String data = tag.Substring(p, tag.Length - p);

  if (data.Chars[0] >= '0' && data.Chars[0] <= '9') return data.AsInt;
  return 0;
}

// Parse the input text for tags and generate text tokens
void _parse_text(String text, FontType base_font, int base_color) {
  int len = text.Length;
  bool plain_text = true;
  int color = base_color;
  FontType font = base_font;
  String ttok = "";
  int ttok_i = 0;
  int ttok_len = 0;

  // Add a fake token to hold the length as color
  _ClearTxtTok();
  _AppendTxtTok("", 0, 0, len, 0);

  for (int i = 0; i < len; i++) {
    int c = text.Chars[i];

    if (c == '[') {
      if (ttok.Length > 0) {
        _AppendTxtTok(ttok, ttok_i, ttok_len, color, font);
        ttok = "";
        ttok_i = i - ttok_len;
        ttok_len = 0;
      }

      i++;
      bool is_closing = false;
      if (i < len && text.Chars[i] == '/') {
        is_closing = true;
        i++;
      }

      int j = i;
      while (j <= len && text.Chars[j] != ']') j++;
      int delta = j - i;

      String strtag = text.Substring(i, delta);
      TagType tag = _get_tag_type(strtag);
      TagType tdata = tag;
      if (is_closing) tdata = eTagNone;
      int data = _get_tag_data(strtag, tdata);
      switch (tag) {
        case eTagColor:
          if (is_closing) color = _stk_color.Pop();
          else {
            _stk_color.Push(color);
            color = data;
          }
          break;
        case eTagFont:
          if (is_closing) font = _stk_font.Pop();
          else {
            _stk_font.Push(font);
            font = data;
          }
          break;
      }

      i += delta + is_closing;
      if (is_closing) {
        ttok_i = i;
      }
    } else if (c == ' ' || c == '\n') {
      if (ttok.Length > 0) {
        _AppendTxtTok(ttok, ttok_i, ttok_len, color, font);
        ttok = "";
        ttok_i = i - ttok_len;
        ttok_len = 0;
      }
      if (c == '\n') {
        _AppendTxtTok(" ", i, 1, color, font);
      }
    } else {
      if (ttok.Length == 0) {
        ttok_i = i;
      }
      ttok = ttok.AppendChar(c);
      ttok_len++;
    }
  }
  if (ttok_len > 0) {
    _AppendTxtTok(ttok, ttok_i, ttok_len, color, font);
  }
}

void _draw_text(DrawingSurface* surf, int x, int y, int color, FontType font, const string text) {
  surf.DrawingColor = color;
  surf.DrawString(x, y, font, text);
}

// Write text tokens on a surface
void _write_tokens(DrawingSurface* surf, String text, int x, int y, int width) {
  int r_x = x;
  int r_y = y;
  int w;
  int itk = 0;
  int color;
  int font;
  int word_width;
  int word_height;
  int line_height;
  String word;

  // Fake initial token encodes lenght as color
  // int len = _txttk[itk].color; // we aren't actually using this now
  itk++; // still need to skip

  for (; itk < _txttk_count; itk++) {
    word = text.Substring(_txttk[itk].text_begin, _txttk[itk].text_length);
    font = _txttk[itk].font;
    color = _txttk[itk].color;
    word_width = _txttk[itk].width;
    word_height = _txttk[itk].height;

    int word_len = word.Length;

    if (word_len <= 0) continue;

    if (w + word_width > width || (word_len == 1 && word == "\n")) {
      // Line break
      r_x = x;
      r_y += line_height;
      w = 0;
      line_height = 0;
    }

    if (word_height > line_height) line_height = word_height;
    w += word_width;

    _draw_text(surf, r_x, r_y, color, font, word);
    
    r_x += word_width;
  }
}

// draw fancy text wrapped on a surface
void DrawFancyTextWrapped(this DrawingSurface*, int x, int y, int width, int color, FontType font, const string text) {
  _parse_text(text, font, color);
  _write_tokens(this, text, x, y, width);
}
