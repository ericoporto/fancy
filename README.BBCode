[size=14pt][b][color=maroon]F[/color][color=hotpink]a[/color][color=navy]n[/color][color=purple]c[/color][color=limegreen]y[/color][/b][/size] [color=gray][b]version 0.4.3 [/b][/color]

[url="https://github.com/ericoporto/fancy/releases/download/v0.4.3/fancy.scm"]Get Latest Release [b]fancy.scm[/b][/url] | [url="https://github.com/ericoporto/fancy"]GitHub Repo[/url] | [url="https://github.com/ericoporto/fancy/releases/download/v0.4.3/fancy_demo_windows.zip"]Project with Demo![/url]

[url="https://github.com/ericoporto/fancy/actions"][img]https://github.com/ericoporto/fancy/actions/workflows/main.yml/badge.svg[/img][/url]

Fancy is a Script module for "fancy" text in Adventure Game Studio, you can have text with multiple colors, fonts, with sprites and other. It brings it's own Typed-Text mechanism and additional fancyness.

The cheatsheet of tags are below. Some tags are "solo", they don't require a closing tag.

[list]
[li]Color tag is [font=Courier New]"[c:123]"[/font] and [font=Courier New]"[/c]"[/font], where [font=Courier New]"123"[/font] is an ags color for the text.[/li]
[li]Outline color tag is [font=Courier New]"[o:123]"[/font] and [font=Courier New]"[/o]"[/font], where [font=Courier New]"123"[/font] is an ags color for the outline.[/li]
[li]Font tag is [font=Courier New]"[f:123]"[/font] and [font=Courier New]"[/f]"[/font], where [font=Courier New]"123"[/font] is an ags font index.[/li]
[li]Sprite tag is solo [font=Courier New]"[s:123]"[/font], where [font=Courier New]"123"[/font] is an ags sprite.[/li]
[/list]

[i]Note:[/i] use [font=Courier New]"\n"[/font] for linefeed, old lone [font=Courier New]"["[/font] ags linefeed is not supported.

Notice that if you need to pass a number that is dynamic you can use String.Format to create the string with the proper number, like if the sprite icon you want to put in your text is from a dynamic sprite or the color of a word comes from a character speech color.

[img width=640]https://i.imgur.com/w5olTxG.png[/img]

[hr]

[size=14pt][b]Usage[/b][/size]

I will improve this soon, for now some small examples

[i]Using a regular drawing surface:[/i]

[code]function room_AfterFadeIn()
{
  Fancy.AddAlias("red", 64493); // this should be at game_start

  DrawingSurface* surf = Room.GetDrawingSurfaceForBackground();

  surf.DrawingColor = 10565;
  surf.DrawRectangle(48, 48, 248, 108);
  surf.DrawFancyStringWrapped(48, 48, 200, 22422, eFontSpeech, "Hello!\n[o:8560]Can you find me the [c:27647]blue cup [s:2041][/c][/o]?\nI lost it in the [c:red]dangerous [f:0]planet[/f][/c], somewhere.");
}[/code]

[i]Simple not-useful typed text example:[/i]

[code]FancyTypedText fttb; // has to be global

function room_AfterFadeIn()
{
  Fancy.AddAlias("red", 64493); // this should be at game_start
  Fancy.AddAlias("ico_bcup", 2041); // this should be at game_start

  fttb.SetDrawingConfig(FancyDrawingConfig.Create(eFontSpeech, 22422));
  fttb.SetDrawingArea(48, 48, 200);
  fttb.Start("Hello!\n[o:8560]Can you find me the [c:27647]blue cup [s:ico_bcup][/c][/o]?\nI lost it in the [c:red]dangerous [f:0]planet[/f][/c], somewhere.");
}

void repeatedly_execute_always()
{
  DrawingSurface* surf = Room.GetDrawingSurfaceForBackground();

  surf.DrawingColor = 10565;
  surf.DrawRectangle(48, 48, 248, 108);

  fttb.Tick();
  fttb.DrawTyped(surf);
}[/code]


[hr]

[size=14pt][b]Script API[/b][/size]
[spoiler]
[size=12pt][b]Script Extensions[/b][/size]

[font=Courier New][b]DrawingSurface.DrawFancyString[/b][/font]
[code]void DrawingSurface.DrawFancyString(int x, int y, int color, FontType font, const string text);[/code]
Draw the text from a fancy string on the drawing surface.

[font=Courier New][b]DrawingSurface.DrawFancyStringWrapped[/b][/font]
[code]void DrawingSurface.DrawFancyStringWrapped(int x, int y, int width, int color, FontType font, const string text);[/code]
Draws text with fancy parsing wrapped within specified boundaries on the drawing surface.


[font=Courier New][b]DynamicSprite.CreateFromFancyString[/b][/font]
[code]DynamicSprite* DynamicSprite.CreateFromFancyString(int color, FontType font, const string text);[/code]
Create a sprite with the text of a fancy string

[font=Courier New][b]DynamicSprite.CreateFromFancyStringWrapped[/b][/font]
[code]DynamicSprite* DynamicSprite.CreateFromFancyStringWrapped(int width, int color, FontType font, const string text);[/code]
Create a sprite with the text of a fancy string wwith word-wrap at set width

[font=Courier New][b]DynamicSprite.CreateFromFancyTextBox[/b][/font]
[code]DynamicSprite* DynamicSprite.CreateFromFancyTextBox(int color, FontType font, Fancy9Piece* f9p, const string text, int width = FANCY_INFINITE_WIDTH);[/code]
Create a sprite of a textbox with a fancy string using a 9-piece.


[font=Courier New][b]Overlay.CreateFancyTextual[/b][/font]
[code]Overlay* Overlay.CreateFancyTextual(int x, int y, int width, int color, FontType font, const string text);[/code]
Creates a screen overlay from fancy text

[font=Courier New][b]Overlay.CreateFancyTextBox[/b][/font]
[code]Overlay* Overlay.CreateFancyTextBox(int x, int y, int width, int color, FontType font, const string text, Fancy9Piece* f9p);[/code]
Creates a screen overlay from a textbox with a fancy string using a 9-piece


[font=Courier New][b]Button.Fancify[/b][/font]
[code]void Button.Fancify(Fancy9Piece* normal, Fancy9Piece* mouse_over = 0, Fancy9Piece* pushed = 0);[/code]
Sets a button NormalGraphic and additional sprites from it's text, assumed as fancy string, and 9-piece.

[font=Courier New][b]Button.UnFancify[/b][/font]
[code]void Button.UnFancify();[/code]
Removes fancyness from button (clear any altered sprites)


[size=12pt][b]Fancy[/b][/size]

This is a global struct you can't instantiate, it contains static methods for global configuration meant to be used at game start.

[font=Courier New][b]Fancy.AddAlias[/b][/font]
[code]static void Fancy.FancyDrawingConfig.AddAlias(String key, int value);[/code]

Allows adding a global alias to a tag-value. Ex: AddAlias("red", 63488) allows using [c:red] instead of [c:63488].

This may be useful if you want to be able to change your mind later on what is the specific of a color, or you want to have an easier type remembering sprite icons you are reusing in your texts.

Alias added here are global to all of Fancy. It's recommended that you only add an alias once to everything you need at the game_start of your project, make it easier to manage aliases.


[size=12pt][b]Fancy9Piece[/b][/size]

This is a managed struct that holds a 9-piece that can be used for drawing text boxes.

[font=Courier New][b]Fancy9Piece.CreateFromTextWindowGui[/b][/font]
[code]static Fancy9Piece* Fancy9Piece.CreateFromTextWindowGui(GUI* text_window_gui);[/code]
Create a 9 piece fancy compatible from a Text Window GUI.

[font=Courier New][b]Fancy9Piece.CreateFrom9Sprites[/b][/font]
[code]static Fancy9Piece* Fancy9Piece.CreateFrom9Sprites(int top , int bottom, int left, int right, int top_left, int top_right, int bottom_left, int bottom_right, int center_piece = 0, int bg_color = 0);[/code]
Create a 9 piece fancy from 9 sprite slots.

You can optionally pass a color instead of a sprite for the center piece, by passing 0 to center_piece and a valid ags color in bg_color.


[size=12pt][b]FancyDrawingConfig[/b][/size]

This is a managed struct meant to configure an instance from FancyTextBase and extensions, prefer using it's [font=Courier New]Create[/font] method.

[font=Courier New][b]FancyDrawingConfig.Create[/b][/font]
[code]static FancyDrawingConfig* FancyDrawingConfig.Create(FontType font, int color, int outline_color, int outline_width, Alignment align, int line_spacing);[/code]
Configuration structure for fancy text drawing, allowing customization of font, text color, line spacing, and alignment.
By default, when using create, if you don't set, outline color is initially set for [font=Courier New]COLOR_TRANSPARENT[/font] and outline width is initially set to 1, align is set to eAlignBottomLeft and line_spacing is 0.


[size=12pt][b]FancyTextBase[/b][/size]

[font=Courier New][b]FancyTextBase.SetDrawingConfig[/b][/font]
[code]void FancyTextBase.SetDrawingConfig(FancyDrawingConfig* config);[/code]
Sets the drawing configuration for fancy text rendering.

[font=Courier New][b]FancyTextBase.SetDrawingArea[/b][/font]
[code]void FancyTextBase.SetDrawingArea(int x, int y, int width = FANCY_INFINITE_WIDTH);[/code]
Sets the area for drawing fancy text, specifying the position and width.

[font=Courier New][b]FancyTextBase.SetFancyText[/b][/font]
[code]void FancyTextBase.SetFancyText(String text);[/code]
Sets the text content for the fancy text, this is where the parsing of the text happens.

[font=Courier New][b]FancyTextBase.Draw[/b][/font]
[code]void FancyTextBase.Draw(DrawingSurface* surf);[/code]
Draws the fancy text on the specified drawing surface.


[size=12pt][b]FancyTypedText[/b][/size]

[font=Courier New][b]FancyTypedText.Clear[/b][/font]
[code]void FancyTypedText.Clear();[/code]
Clears all text and resets everything for typed text.

[font=Courier New][b]FancyTypedText.Start[/b][/font]
[code]void FancyTypedText.Start(String text);[/code]
Sets a new string and resets everything to start typing. You can then use Tick repeatedly to advance the text.

[font=Courier New][b]FancyTypedText.Skip[/b][/font]
[code]void FancyTypedText.Skip();[/code]
Skips all remaining typing of the text.

[font=Courier New][b]FancyTypedText.Tick[/b][/font]
[code]void FancyTypedText.Tick();[/code]
Updates the typed text state, advancing it by a single tick.

[font=Courier New][b]FancyTypedText.DrawTyped[/b][/font]
[code]void FancyTypedText.DrawTyped(DrawingSurface* surf);[/code]
Draws the typed text in it's current state.[/spoiler]


[hr]

[i][b]License[/b][/i]
This module is created by eri0o is provided with MIT License, see [url="https://github.com/ericoporto/fancy/blob/main/LICENSE"]LICENSE[/url] for more details.