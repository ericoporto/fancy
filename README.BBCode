[size=14pt][b][color=maroon]F[/color][color=hotpink]a[/color][color=navy]n[/color][color=purple]c[/color][color=limegreen]y[/color][/b][/size] [color=gray][b]version 0.1.0 [/b][/color]

[url="https://github.com/ericoporto/fancy/releases/download/0.1.0/fancy.scm"]Get Latest Release [b]fancy.scm[/b][/url] | [url="https://github.com/ericoporto/fancy"]GitHub Repo[/url]

Fancy is a Script module for "fancy" text in Adventure Game Studio, you can have text with multiple colors, fonts, with sprites and other. It brings it's own Typed-Text mechanism and additional fancyness.

The cheatsheet of tags are below. Some tags are "solo", they don't require a closing tag.

[list]
[li]Color tag is [font=Courier New]"[c:123]"[/font] and [font=Courier New]"[/c]"[/font], where [font=Courier New]"123"[/font] is an ags color.[/li]
[li]Font tag is [font=Courier New]"[f:123]"[/font] and [font=Courier New]"[/f]"[/font], where [font=Courier New]"123"[/font] is an ags font index.[/li]
[li]Sprite tag is solo  [font=Courier New]"[s:123]"[/font], where [font=Courier New]"123"[/font] is an ags sprite.[/li]
[/list]

[i]Note:[/i] use [font=Courier New]"\n"[/font] for linefeed, old lone [font=Courier New]"["[/font] ags linefeed is not supported.


[size=14pt][b]Usage[/b][/size]

To be written...


[size=14pt][b]Script API[/b][/size]

[size=12pt][b]Script Extensions[/b][/size]

[font=Courier New][b]DrawingSurface.DrawFancyTextWrapped[/b][/font]
[code]void DrawingSurface.DrawFancyTextWrapped(int x, int y, int width, int color, FontType font, const string text);[/code]
Draws text with fancy parsing wrapped within specified boundaries on the drawing surface.


[size=12pt][b]FancyDrawingConfig[/b][/size]

[font=Courier New][b]FancyDrawingConfig.Create[/b][/font]
[code]static FancyDrawingConfig* FancyDrawingConfig.Create(FontType font, int color, Alignment align, int line_spacing);[/code]
Configuration structure for fancy text drawing, allowing customization of font, text color, line spacing, and alignment.


[size=12pt][b]FancyTextBase[/b][/size]

[font=Courier New][b]FancyTextBase.SetDrawingConfig[/b][/font]
[code]void FancyTextBase.SetDrawingConfig(FancyDrawingConfig* config);[/code]
Sets the drawing configuration for fancy text rendering.

[font=Courier New][b]FancyTextBase.SetDrawingArea[/b][/font]
[code]void FancyTextBase.SetDrawingArea(int x, int y, int width = FANCY_INFINITE_WIDTH);[/code]
Sets the area for drawing fancy text, specifying the position and width.

[font=Courier New][b]FancyTextBase.SetFancyText[/b][/font]
[code]void FancyTextBase.SetFancyText(String text);[/code]
Sets the text content for the fancy text box.

[font=Courier New][b]FancyTextBase.Draw[/b][/font]
[code]void FancyTextBase.Draw(DrawingSurface* surf);[/code]
Draws the fancy text on the specified drawing surface.


[size=12pt][b]FancyTypedText[/b][/size]

[font=Courier New][b]FancyTypedText.Clear[/b][/font]
[code]void FancyTypedText.Clear();[/code]
Clears all text and resets everything for typed text.

[font=Courier New][b]FancyTypedText.Start[/b][/font]
[code]void FancyTypedText.Start(String text);[/code]
Sets a new string and resets everything to start typing. You can then use Tick repeatedly to advance the text.

[font=Courier New][b]FancyTypedText.Skip[/b][/font]
[code]void FancyTypedText.Skip();[/code]
Skips all remaining typing of the text.

[font=Courier New][b]FancyTypedText.Tick[/b][/font]
[code]void FancyTypedText.Tick();[/code]
Updates the typed text state, advancing it by a single tick.

[font=Courier New][b]FancyTypedText.DrawTyped[/b][/font]
[code]void FancyTypedText.DrawTyped(DrawingSurface* surf);[/code]
Draws the typed text in it's current state.
